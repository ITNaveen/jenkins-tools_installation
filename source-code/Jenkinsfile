pipeline {
    agent {
        node {
            label 'maven'
        }
    }

    options {
        timestamps() // Adds timestamps for better logging
        disableConcurrentBuilds() // Ensures only one build runs at a time
    }

    environment {
        PATH = "/opt/apache-maven-3.9.9/bin:$PATH"
    }

    stages {
        stage('Build') {
            steps {
                dir('source-code') {
                    echo "------build started ---------"
                    sh 'mvn clean deploy -Dmaven.test.skip=true'
                    echo "------build completed ---------"
                }
            }
        }
        stage('test') {
            steps{
                dir('source-code') {
                    echo "------unit test started ---------"
                    sh 'mvn surefire-report:report'
                    echo "------unit test completed ---------"
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool 'sonar-scanner' // Jenkins tool name
            }
            steps {
                dir('source-code') {
                    withSonarQubeEnv('sonarqube-server') {  // check from system, its s server name.
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
            
        stage("Quality Gate") {
                steps {
                    script {
                        timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be aborted
                            def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            }
                        }
                    }
                }
            }




        }
    }
}
